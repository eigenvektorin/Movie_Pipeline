name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  BACKEND_ECR: ${{ secrets.BACKEND_ECR }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}

jobs:

  lint-backend:
    name: 'Lint backend'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10.6
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.6'

      - name: Cache pipenv packages
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install --dev
        working-directory: starter/backend

      - name: Run lint
        run: pipenv run lint
        working-directory: starter/backend

  test-backend:
    name: 'Test backend'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10.6
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.6'

      - name: Cache pipenv packages
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install --dev
        working-directory: starter/backend

      - name: Run tests
        run: pipenv run test
        working-directory: starter/backend

  build-backend:
    name: 'Build backend'
    needs: [lint-backend, test-backend]
    runs-on: ubuntu-latest

    outputs:
      REPOSITORY: ${{ steps.build-and-push.outputs.REPOSITORY }}
      IMAGE_TAG: ${{ steps.build-and-push.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10.6
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.6'

      - name: Cache pipenv packages
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-and-push
        env:
          REGISTRY: ${{ secrets.BACKEND_ECR }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend
          docker build -t $REGISTRY:$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY:$REPOSITORY:$IMAGE_TAG

          echo "::set-output name=REPOSITORY::$REPOSITORY"
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"

  deploy-backend:
    name: 'Deploy Backend'
    needs: [build-backend]
    runs-on: ubuntu-latest

    env:
      REPOSITORY: ${{ needs.build-backend.outputs.REPOSITORY }}
      IMAGE_TAG: ${{ needs.build-backend.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to Kubernetes
        run: |
          aws eks update-kubeconfig --name=${{ secrets.CLUSTER_NAME }}
          cd starter/backend/k8s
          kustomize edit set image backend=${{ secrets.BACKEND_ECR }}:${{ needs.build-backend.outputs.IMAGE_TAG }}
          kustomize build | kubectl apply -f -
